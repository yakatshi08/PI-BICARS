"""
Router FastAPI pour le module Analytics ML
Endpoints pour l'intelligence artificielle Finance/Assurance
"""
from fastapi import APIRouter, HTTPException, BackgroundTasks, Depends
from fastapi.responses import JSONResponse
from typing import Dict, Any, List
import logging
from datetime import datetime

from .models import (
    SectorDetectionRequest, SectorDetectionResponse,
    ModelSelectionRequest, ModelSelectionResponse,
    AnomalyDetectionRequest, AnomalyDetectionResponse,
    AutoMLRequest, AutoMLResponse,
    ScenarioAnalysisRequest, ScenarioAnalysisResponse,
    PredictionRequest, PredictionResponse,
    SectorMetricsRequest, SectorMetricsResponse,
    RegulatoryReportRequest, RegulatoryReportResponse,
    ModelExplanationRequest, ModelExplanationResponse,
    ModelMonitoringRequest, ModelMonitoringResponse,
    BatchProcessRequest, BatchProcessResponse,
    DataStatus
)
from .service import analytics_service
from app.core.auth import get_current_user
from app.models.user import User

logger = logging.getLogger(__name__)

# Cr√©ation du router
router = APIRouter(
    prefix="/api/v1/analytics-ml",
    tags=["Analytics ML"],
    responses={404: {"description": "Not found"}}
)


# ========== ENDPOINTS D√âTECTION & CONFIGURATION ==========

@router.post("/detect-sector", response_model=SectorDetectionResponse)
async def detect_sector(
    request: SectorDetectionRequest,
    current_user: User = Depends(get_current_user)
):
    """
    D√©tecte automatiquement le secteur (Banking/Insurance) bas√© sur les donn√©es
    
    Cette fonction analyse les patterns dans les noms de colonnes et les donn√©es
    pour identifier automatiquement si les donn√©es appartiennent au secteur
    bancaire ou assurance.
    """
    try:
        logger.info(f"D√©tection de secteur demand√©e par {current_user.email}")
        response = await analytics_service.detect_sector(request)
        return response
    except Exception as e:
        logger.error(f"Erreur d√©tection secteur: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/select-model", response_model=ModelSelectionResponse)
async def select_model(
    request: ModelSelectionRequest,
    current_user: User = Depends(get_current_user)
):
    """
    S√©lectionne automatiquement le meilleur mod√®le ML pour le cas d'usage
    
    Bas√© sur le type de donn√©es, le secteur et les caract√©ristiques,
    cette fonction recommande le mod√®le ML le plus appropri√©.
    """
    try:
        logger.info(f"S√©lection de mod√®le pour {request.data_type} - Secteur: {request.sector}")
        response = await analytics_service.select_model(request)
        return response
    except Exception as e:
        logger.error(f"Erreur s√©lection mod√®le: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS ANALYSE & D√âTECTION ==========

@router.post("/detect-anomalies", response_model=AnomalyDetectionResponse)
async def detect_anomalies(
    request: AnomalyDetectionRequest,
    current_user: User = Depends(get_current_user)
):
    """
    D√©tecte les anomalies dans les donn√©es financi√®res/assurance
    
    Utilise Isolation Forest et d'autres algorithmes pour identifier
    les transactions ou patterns suspects n√©cessitant une attention particuli√®re.
    """
    try:
        logger.info(f"D√©tection d'anomalies - Sensibilit√©: {request.sensitivity}")
        response = await analytics_service.detect_anomalies(request)
        
        # Log si beaucoup d'anomalies d√©tect√©es
        if response.anomalies_count > 50:
            logger.warning(f"Nombre √©lev√© d'anomalies d√©tect√©es: {response.anomalies_count}")
            
        return response
    except Exception as e:
        logger.error(f"Erreur d√©tection anomalies: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/analyze-scenarios", response_model=ScenarioAnalysisResponse)
async def analyze_scenarios(
    request: ScenarioAnalysisRequest,
    current_user: User = Depends(get_current_user)
):
    """
    Analyse de sc√©narios et stress testing
    
    Effectue des simulations Monte Carlo et calcule VaR/CVaR
    pour diff√©rents sc√©narios de risque selon B√¢le III ou Solvency II.
    """
    try:
        logger.info(f"Analyse de {len(request.scenarios)} sc√©narios pour {request.sector}")
        response = await analytics_service.analyze_scenarios(request)
        return response
    except Exception as e:
        logger.error(f"Erreur analyse sc√©narios: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS AUTOML & PR√âDICTION ==========

@router.post("/automl/train", response_model=AutoMLResponse)
async def train_automl(
    request: AutoMLRequest,
    background_tasks: BackgroundTasks,
    current_user: User = Depends(get_current_user)
):
    """
    Lance un pipeline AutoML pour entra√Æner automatiquement des mod√®les
    
    Compare plusieurs algorithmes (XGBoost, Random Forest, Neural Networks, etc.)
    et s√©lectionne le meilleur selon les m√©triques de performance.
    """
    try:
        logger.info(f"Lancement AutoML - T√¢che: {request.task_type}, Secteur: {request.sector}")
        
        # Pour les jobs longs, on pourrait utiliser background_tasks
        # background_tasks.add_task(analytics_service.run_automl_background, request)
        
        response = await analytics_service.run_automl(request)
        return response
    except Exception as e:
        logger.error(f"Erreur AutoML: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/predict", response_model=PredictionResponse)
async def predict(
    request: PredictionRequest,
    current_user: User = Depends(get_current_user)
):
    """
    Effectue une pr√©diction avec un mod√®le entra√Æn√©
    
    Utilise le mod√®le sp√©cifi√© pour faire des pr√©dictions
    et fournit les intervalles de confiance si demand√©s.
    """
    try:
        logger.info(f"Pr√©diction avec mod√®le {request.model_id}")
        response = await analytics_service.predict(request)
        return response
    except Exception as e:
        logger.error(f"Erreur pr√©diction: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS M√âTRIQUES SECTORIELLES ==========

@router.post("/metrics/calculate", response_model=SectorMetricsResponse)
async def calculate_metrics(
    request: SectorMetricsRequest,
    current_user: User = Depends(get_current_user)
):
    """
    Calcule les m√©triques sp√©cifiques au secteur
    
    - Banking: NII, LCR, NSFR, CET1, NPL Ratio
    - Insurance: Combined Ratio, Loss Ratio, SCR, MCR
    """
    try:
        logger.info(f"Calcul m√©triques {request.sector} - P√©riode: {request.period}")
        response = await analytics_service.calculate_sector_metrics(request)
        
        # Alertes critiques
        if response.alerts:
            for alert in response.alerts:
                if "üö®" in alert:
                    logger.critical(f"Alerte critique: {alert}")
                    
        return response
    except Exception as e:
        logger.error(f"Erreur calcul m√©triques: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS RAPPORTS R√âGLEMENTAIRES ==========

@router.post("/regulatory/generate-report")
async def generate_regulatory_report(
    request: RegulatoryReportRequest,
    background_tasks: BackgroundTasks,
    current_user: User = Depends(get_current_user)
):
    """
    G√©n√®re un rapport r√©glementaire (COREP, FINREP, QRT Solvency II)
    
    Cr√©ation automatique des rapports conformes aux exigences
    r√©glementaires pour la banque ou l'assurance.
    """
    try:
        logger.info(f"G√©n√©ration rapport {request.report_type} pour {request.sector}")
        
        # Simulation de g√©n√©ration de rapport
        report_id = f"RPT_{request.report_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Dans un cas r√©el, on lancerait la g√©n√©ration en background
        # background_tasks.add_task(generate_report_async, request, report_id)
        
        return RegulatoryReportResponse(
            report_id=report_id,
            report_type=request.report_type,
            validation_status="pending",
            validation_errors=[],
            report_url=f"/api/v1/reports/{report_id}",
            submission_ready=False
        )
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration rapport: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS EXPLAINABILITY & MONITORING ==========

@router.post("/explain")
async def explain_model(
    request: ModelExplanationRequest,
    current_user: User = Depends(get_current_user)
):
    """
    Fournit des explications pour les pr√©dictions du mod√®le
    
    Utilise SHAP ou LIME pour expliquer les d√©cisions du mod√®le
    et am√©liorer la transparence pour la conformit√© r√©glementaire.
    """
    try:
        logger.info(f"Explication mod√®le {request.model_id} - Type: {request.explanation_type}")
        
        # Simulation d'explication
        return ModelExplanationResponse(
            feature_importance={
                "credit_score": 0.35,
                "income": 0.25,
                "debt_ratio": 0.20,
                "employment_years": 0.15,
                "other": 0.05
            },
            decision_path=["High credit score", "Stable income", "Low debt ratio"],
            confidence=0.87,
            visualization_data={
                "shap_values": [],
                "feature_names": []
            }
        )
    except Exception as e:
        logger.error(f"Erreur explication mod√®le: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/monitor")
async def monitor_model(
    request: ModelMonitoringRequest,
    current_user: User = Depends(get_current_user)
):
    """
    Monitore la performance et le drift des mod√®les en production
    
    D√©tecte la d√©gradation de performance et recommande
    le retraining si n√©cessaire.
    """
    try:
        logger.info(f"Monitoring mod√®le {request.model_id}")
        
        # Simulation de monitoring
        drift_score = 0.15  # Exemple
        
        return ModelMonitoringResponse(
            drift_detected=drift_score > 0.2,
            drift_score=drift_score,
            performance_degradation=False,
            current_accuracy=0.89,
            baseline_accuracy=0.92,
            retraining_recommended=drift_score > 0.3,
            alerts=["L√©g√®re baisse de performance d√©tect√©e"] if drift_score > 0.1 else []
        )
    except Exception as e:
        logger.error(f"Erreur monitoring: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS BATCH & ASYNCHRONES ==========

@router.post("/batch/submit")
async def submit_batch_job(
    request: BatchProcessRequest,
    background_tasks: BackgroundTasks,
    current_user: User = Depends(get_current_user)
):
    """
    Soumet un job de traitement batch pour analyses lourdes
    
    Permet de lancer des analyses complexes en arri√®re-plan
    sans bloquer l'interface utilisateur.
    """
    try:
        logger.info(f"Soumission batch job {request.job_type} - Priorit√©: {request.priority}")
        
        # G√©n√©ration ID job
        job_id = f"JOB_{request.job_type.value}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # Lancement en background
        # background_tasks.add_task(process_batch_job, request, job_id)
        
        return BatchProcessResponse(
            job_id=job_id,
            status=DataStatus.PENDING,
            estimated_completion=datetime.now(),
            progress=0.0,
            results_location=f"/api/v1/jobs/{job_id}/results"
        )
    except Exception as e:
        logger.error(f"Erreur soumission batch: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/batch/status/{job_id}")
async def get_batch_status(
    job_id: str,
    current_user: User = Depends(get_current_user)
):
    """R√©cup√®re le statut d'un job batch"""
    try:
        # Dans un cas r√©el, on r√©cup√©rerait le statut depuis la DB/cache
        return {
            "job_id": job_id,
            "status": "processing",
            "progress": 0.45,
            "message": "Analyse en cours..."
        }
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration statut: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


# ========== ENDPOINTS SANT√â & M√âTADONN√âES ==========

@router.get("/health")
async def health_check():
    """V√©rification de sant√© du module Analytics ML"""
    return {
        "status": "healthy",
        "module": "analytics_ml",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat()
    }


@router.get("/models/available")
async def get_available_models(current_user: User = Depends(get_current_user)):
    """Liste les mod√®les ML disponibles"""
    return {
        "models": [
            {
                "type": "xgboost",
                "name": "XGBoost",
                "description": "Gradient Boosting optimis√© pour finance",
                "use_cases": ["credit_scoring", "fraud_detection", "churn_prediction"]
            },
            {
                "type": "prophet",
                "name": "Prophet",
                "description": "Pr√©vision de s√©ries temporelles",
                "use_cases": ["revenue_forecast", "claims_prediction", "demand_planning"]
            },
            {
                "type": "lstm",
                "name": "LSTM",
                "description": "R√©seau de neurones pour s√©quences",
                "use_cases": ["market_prediction", "risk_modeling", "pattern_detection"]
            },
            {
                "type": "random_forest",
                "name": "Random Forest",
                "description": "Ensemble robuste pour classification/r√©gression",
                "use_cases": ["underwriting", "customer_segmentation", "pricing"]
            }
        ]
    }


@router.get("/metrics/definitions/{sector}")
async def get_metrics_definitions(
    sector: SectorType,
    current_user: User = Depends(get_current_user)
):
    """Retourne les d√©finitions des m√©triques pour un secteur"""
    if sector == SectorType.BANKING:
        return {
            "metrics": {
                "nii": "Net Interest Income - Revenus nets d'int√©r√™ts",
                "lcr": "Liquidity Coverage Ratio - Ratio de liquidit√© court terme",
                "nsfr": "Net Stable Funding Ratio - Ratio de financement stable",
                "cet1": "Common Equity Tier 1 - Ratio de fonds propres durs",
                "npl_ratio": "Non-Performing Loans Ratio - Ratio de cr√©ances douteuses"
            }
        }
    else:
        return {
            "metrics": {
                "combined_ratio": "Ratio combin√© = (Sinistres + Frais) / Primes",
                "loss_ratio": "Ratio de sinistralit√© = Sinistres / Primes",
                "expense_ratio": "Ratio de frais = Frais / Primes",
                "scr_ratio": "Solvency Capital Requirement - Capital de solvabilit√© requis",
                "mcr_ratio": "Minimum Capital Requirement - Capital minimum requis"
            }
        }